/*
 * @(#)AluCar.java
 *
 * Copyright (c) 2025 FAE-USACH
 */
package domain.model;

import com.opensymphony.xwork2.Action;
import domain.repository.DerechoRepository;
import infrastructure.support.InscripcionSupport;
import infrastructure.support.MallaContainerSupport;
import infrastructure.support.ParametroSesionSupport;
import infrastructure.support.DerechoCoordinadorSupport;
import infrastructure.support.MallaJsonSupport;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.*;
import session.GenericSession;
import infrastructure.support.action.common.ActionCommonSupport;
import infrastructure.util.ActionUtil;
import infrastructure.util.ContextUtil;
import static infrastructure.util.DateUtil.getDateGetterSetter;
import infrastructure.util.common.CommonAlumnoUtil;
import infrastructure.util.common.CommonCursoUtil;
import static infrastructure.util.common.CommonMallaUtil.getMallaCommonAlumno;
import static infrastructure.util.common.CommonMallaUtil.getMallaCommonAlumnoJson;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * AluCar generated by hbm2java
 */
public class AluCar implements Serializable {

    private static final long serialVersionUID = 1L;
    private Aaingreso aaingreso;
    private Integer acaAsigR2da;
    private BigDecimal acaFaAnt;
    private BigDecimal acaFeAnt;
    private Date acaFecResol;
    private BigDecimal acaPromAnt;
    private BigDecimal acaPtjeRank;
    private Integer acaRanking;
    private Integer acaResol;
    private Integer acaCodPlan;
    private Integer acaCodMen;
    private AluCarFunctionsView aluCarFunction;
    private Alumno alumno;
    private Integer asignaturasInscritas;
    private List<Ccalidad> calidades;
    private List<CalificacionLogroAdicional> calificacionLogroAdicionalList;
    private List<Calificacion> calificaciones;
    private List<Calificacion> calificacionesAsignatura;
    private List<Curso> carga;
    private List<CursoEspejo> cargaEspejo;
    private List<CartolaView> cartolaView;
    private Integer creditosInscritos;
    private Integer creditosNivel;
    private Integer sctNivel;
    private List<Curso> cursosInscripcion;
    private List<Derecho> derechosInscripcion;
    private List<DerechoCoordinadorSupport> derechosCoordinadorInscripcion;
    private List<EvaluacionAlumno> evaluacionAlumnoList;
    private AluCarId id;
    private boolean isAlumnoPropio;
    private List<MatriculaHistorico> matriculas;
    private ParametroSesionSupport parametros;
    private Plan plan;
    private List<RequisitoLogroAdicional> requisitoLogroAdicionalList;
    private Integer sctInscritos;
    private List<Sacarrera> situaciones;
    private Tcalidad tcalidad;
    private Tsacademica tsacademica;
    private ParametroMencion parametroMencion;
    private List<Inscripcion> insList;

    /**
     *
     */
    public AluCar() {
    }

    /**
     * Method description
     *
     * @return
     */
    public AluCarId getId() {
        return this.id;
    }

    /**
     * Method description
     *
     * @param id
     */
    public void setId(AluCarId id) {
        this.id = id;
    }

    /**
     * Method description
     *
     * @return
     */
    public Tsacademica getTsacademica() {
        return this.tsacademica;
    }

    /**
     * Method description
     *
     * @param tsacademica
     */
    public void setTsacademica(Tsacademica tsacademica) {
        this.tsacademica = tsacademica;
    }

    /**
     * Method description
     *
     * @return
     */
    public Tcalidad getTcalidad() {
        return this.tcalidad;
    }

    /**
     * Method description
     *
     * @param tcalidad
     */
    public void setTcalidad(Tcalidad tcalidad) {
        this.tcalidad = tcalidad;
    }

    /**
     * Method description
     *
     * @return
     */
    public Alumno getAlumno() {
        return this.alumno;
    }

    /**
     * Method description
     *
     * @param alumno
     */
    public void setAlumno(Alumno alumno) {
        this.alumno = alumno;
    }

    /**
     * Method description
     *
     * @return
     */
    public Plan getPlan() {
        return this.plan;
    }

    /**
     * Method description
     *
     * @param plan
     */
    public void setPlan(Plan plan) {
        this.plan = plan;
    }

    /**
     *
     * @return
     */
     /**
     *
     * @return
     */
    public ParametroMencion getParametroMencion() {
        return parametroMencion;
    }

    /**
     *
     * @param parametroMencion
     */
    public void setParametroMencion(ParametroMencion parametroMencion) {
        this.parametroMencion = parametroMencion;
    }


    /**
     * Method description
     *
     * @return
     */
    public Integer getAcaRanking() {
        return this.acaRanking;
    }

    /**
     * Method description
     *
     * @param acaRanking
     */
    public void setAcaRanking(Integer acaRanking) {
        this.acaRanking = acaRanking;
    }

    /**
     * Method description
     *
     * @return
     */
    public BigDecimal getAcaPtjeRank() {
        return this.acaPtjeRank;
    }

    /**
     * Method description
     *
     * @param acaPtjeRank
     */
    public void setAcaPtjeRank(BigDecimal acaPtjeRank) {
        this.acaPtjeRank = acaPtjeRank;
    }

    /**
     * Method description
     *
     * @return
     */
    public Integer getAcaAsigR2da() {
        return this.acaAsigR2da;
    }

    /**
     * Method description
     *
     * @param acaAsigR2da
     */
    public void setAcaAsigR2da(Integer acaAsigR2da) {
        this.acaAsigR2da = acaAsigR2da;
    }

    /**
     * Method description
     *
     * @return
     */
    public Integer getAcaResol() {
        return this.acaResol;
    }

    /**
     * Method description
     *
     * @param acaResol
     */
    public void setAcaResol(Integer acaResol) {
        this.acaResol = acaResol;
    }

    /**
     * Method description
     *
     * @return a defensive copy of the field. The caller may change the state of
     * the returned object in any way, without affecting the internals of this
     * class.
     */
    public Date getAcaFecResol() {
        return getDateGetterSetter(acaFecResol);
    }

    /**
     * Method description
     *
     * @param acaFecResol
     */
    public void setAcaFecResol(Date acaFecResol) {
        this.acaFecResol = getDateGetterSetter(acaFecResol);
    }

    /**
     * Method description
     *
     * @return
     */
    public BigDecimal getAcaPromAnt() {
        return this.acaPromAnt;
    }

    /**
     * Method description
     *
     * @param acaPromAnt
     */
    public void setAcaPromAnt(BigDecimal acaPromAnt) {
        this.acaPromAnt = acaPromAnt;
    }

    /**
     * Method description
     *
     * @return
     */
    public BigDecimal getAcaFaAnt() {
        return this.acaFaAnt;
    }

    /**
     * Method description
     *
     * @param acaFaAnt
     */
    public void setAcaFaAnt(BigDecimal acaFaAnt) {
        this.acaFaAnt = acaFaAnt;
    }

    /**
     * Method description
     *
     * @return
     */
    public BigDecimal getAcaFeAnt() {
        return this.acaFeAnt;
    }

    /**
     * Method description
     *
     * @param acaFeAnt
     */
    public void setAcaFeAnt(BigDecimal acaFeAnt) {
        this.acaFeAnt = acaFeAnt;
    }

    public Integer getAcaCodPlan() {
        return acaCodPlan;
    }

    public void setAcaCodPlan(Integer acaCodPlan) {
        this.acaCodPlan = acaCodPlan;
    }

    public Integer getAcaCodMen() {
        return acaCodMen;
    }

    public void setAcaCodMen(Integer acaCodMen) {
        this.acaCodMen = acaCodMen;
    }

    /**
     * Method description
     *
     *
     * @return
     */
    public Integer getSctInscritos() {
        return sctInscritos;
    }

    /**
     * Method description
     *
     *
     * @param sctInscritos
     */
    public void setSctInscritos(Integer sctInscritos) {
        this.sctInscritos = sctInscritos;
    }

    /**
     * Method description
     *
     * @return
     */
    public Aaingreso getAaingreso() {
        return this.aaingreso;
    }

    /**
     * Method description
     *
     * @param aaingreso
     */
    public void setAaingreso(Aaingreso aaingreso) {
        this.aaingreso = aaingreso;
    }

    public List<Inscripcion> getInsList() {
        return insList;
    }

    public void setInsList(List<Inscripcion> insList) {
        this.insList = insList;
    }

    /**
     * Method description
     *
     * @return
     */
    public List<Curso> getCarga() {
        return carga;
    }

    public void setCarga(GenericSession gs) {
        this.carga = CommonAlumnoUtil.getCarga(this, gs);       
        this.cargaEspejo = CommonCursoUtil.getEspejos(this.carga);
    }

    /**
     * Method description
     *
     * @return
     */
    public AluCarFunctionsView getAluCarFunction() {
        return aluCarFunction;
    }

    /**
     * Method description
     *
     */
    public void setAluCarFunction() {
        this.aluCarFunction = CommonAlumnoUtil.getAluCarFunction(this);
    }

    /**
     * Method description
     *
     * @return
     */
    public ParametroSesionSupport getParametros() {
        return this.parametros;
    }

    /**
     * Method description
     *
     * @return
     */
    public List<Derecho> getDerechosInscripcion() {
        return derechosInscripcion;
    }

    /**
     * Method description
     *
     * @param derechosInscripcion
     */
    public void setDerechosInscripcion(List<Derecho> derechosInscripcion) {
        this.derechosInscripcion = derechosInscripcion;
    }

    /**
     * Method description
     *
     * @return
     */
    public List<Calificacion> getCalificacionesAsignatura() {
        return calificacionesAsignatura;
    }

    /**
     * Method description
     *
     * @param calificacionesAsignatura
     */
    public void setCalificacionesAsignatura(List<Calificacion> calificacionesAsignatura) {
        this.calificacionesAsignatura = calificacionesAsignatura;
    }

    /**
     * Method description
     *
     * @return
     */
    public List<CalificacionLogroAdicional> getcalificacionLogroAdicionalList() {
        return calificacionLogroAdicionalList;
    }

    /**
     * Method description
     *
     * @param calificacionLogroAdicionalList
     *
     */
    public void setcalificacionLogroAdicionalList(List<CalificacionLogroAdicional> calificacionLogroAdicionalList) {
        this.calificacionLogroAdicionalList = calificacionLogroAdicionalList;
    }

    /**
     * Method description
     *
     * @return
     */
    public List<CartolaView> getCartolaView() {
        return cartolaView;
    }

    /**
     * Method description
     *
     */
    public void setCartolaView() {
        this.cartolaView = ContextUtil.getDAO().getCartolaViewRepository(ActionUtil.getDBUser()).find(this);
    }

    /**
     * Method description
     *
     * @param agno
     */
    public void setCartolaAgnoView(Integer agno) {
        this.cartolaView = ContextUtil.getDAO().getCartolaViewRepository(ActionUtil.getDBUser()).find(this, agno);
    }

    /**
     * BUSINESS LOGIC
     *
     */
    /**
     *
     * @param agno
     * @param sem
     * @return
     */
    public boolean estaMatriculado(Integer agno, Integer sem) {
        return ContextUtil.getDAO().getMatriculaHistoricoRepository(ActionUtil.getDBUser()).find(this.getId(), agno, sem) == 1;
    }

    /**
     * Method description
     *
     * @return
     */
    public boolean estaActivo() {
        return this.tcalidad.getTcaCod() <= 2 && this.tsacademica.getTsaCod() >= 100;
    }

    /**
     * Method description
     *
     * @return
     */
    public String getNombreCarrera() {
        return this.plan.getNombreCarreraFull();
    }

    /**
     * Method description
     *
     * @return
     */
    public List<Derecho> getDerechos() {
        return this.derechosInscripcion;
    }

    /**
     * Method description
     *
     *
     * @return
     */
    public List<DerechoCoordinadorSupport> getDerechosCoordinadorInscripcion() {
        return this.derechosCoordinadorInscripcion;
    }

    /**
     * Method description
     */
    public void setDerechosAlumno() {    
        List<Derecho> der1 = new ArrayList<>();
        List<Derecho> der2 = new ArrayList<>();
        
        DerechoRepository derRep =  ContextUtil.getDAO().getDerechoRepository(ActionUtil.getDBUser());
        
        derRep.generarDerechos(this);
 
        // Cargar der1 si se puede inscribir en Malla
        if ("SI".equals(this.parametros.getPuedeInscribirMalla())||"SI".equals(this.parametros.getPuedeModificar())) {                      
            der1 = derRep.findDerMalla(this);
        }

        // Cargar der2 si se puede inscribir en Formación Integral
        if ("SI".equals(this.parametros.getPuedeInscribirFormacionIntegral())) {
            der2 = derRep.findDerFI(this);
        }

        // Concatenar ambas listas
        List<Derecho> concatenados = Stream.concat(der1.stream(), der2.stream())
                .collect(Collectors.toList());

        // Asignar la lista concatenada a derechosInscripcion
        this.setDerechosInscripcion(concatenados);        
    }

    /**
     * Method description
     *
     * @param rut
     * @param userType
     */
    public void setDerechosCoordinadorInscripcion(Integer rut, String userType) {
        this.derechosCoordinadorInscripcion = ContextUtil.getDAO().getDerechoRepository(ActionUtil.getDBUser()).getDerechoCoordinador(this, rut, userType);
    }

    public void setDerechosCoordinadorInscripcionLibre(Integer rut) {
        this.derechosCoordinadorInscripcion = ContextUtil.getDAO().getDerechoRepository(ActionUtil.getDBUser()).getDerechoCoordinadorLibre(this, rut);
    }

    public void setDerechosFIInscripcion(Integer rut, String userType) {
        this.derechosCoordinadorInscripcion = ContextUtil.getDAO().getDerechoRepository(ActionUtil.getDBUser()).getDerechoFI(this, rut, userType);
    }

    /**
     * Method description
     *
     * @return
     */
    public List<MatriculaHistorico> getMatriculas() {
        return this.matriculas;
    }

    /**
     * Method description
     *
     */
    public void setMatriculas() {
        this.matriculas = ContextUtil.getDAO().getMatriculaHistoricoRepository(ActionUtil.getDBUser()).find(this);
    }

    /**
     * Method description
     *
     * @return
     */
    public List<Ccalidad> getCalidades() {
        return this.calidades;
    }

    /**
     * Method description
     *
     */
    public void setCalidades() {
        this.calidades
                = ContextUtil.getDAO().getCcalidadRepository(ActionUtil.getDBUser()).find(this);
    }

    /**
     * Method description
     *
     * @return
     */
    public List<Sacarrera> getSituaciones() {
        return this.situaciones;
    }

    /**
     * Method description
     *
     */
    public void setSituaciones() {
        this.situaciones
                = ContextUtil.getDAO().getSacarreraRepository(ActionUtil.getDBUser()).find(this);
    }

    /**
     * Method description
     *
     * @return
     */
    public List<Calificacion> getCalificaciones() {
        return this.calificaciones;
    }

    /**
     * Method description
     *
     * @param userType
     */
    public void setCalificaciones(String userType) {
        this.calificaciones = ContextUtil.getDAO().getCalificacionRepository(userType).find(this);
    }

    /**
     * Method description
     *
     * @param userType
     * @return
     */
    public MallaContainerSupport getMalla(String userType) {
        return getMallaCommonAlumno(this, userType);
    }

    
    /**
     * Method description
     *
     * @param userType
     * @return
     */
    public List<MallaJsonSupport> getMallaJson(String userType) {
        return getMallaCommonAlumnoJson(this, userType);
    }
    
    /**
     * Method description
     *
     * @return
     */
    public List<RequisitoLogroAdicional> getRequisitoLogroAdicionalList() {
        return requisitoLogroAdicionalList;
    }

    /**
     * Method description
     *
     *
     * @return
     */
    public boolean getIsAlumnoPropio() {
        return isAlumnoPropio;
    }

    /**
     * Method description
     *
     *
     * @param genericSession
     */
    public void setIsAlumnoPropio(GenericSession genericSession) {
        this.isAlumnoPropio = new InscripcionSupport(this,
                genericSession).isAlumnoPropio(genericSession.getRut(), genericSession.getUserType()) != 0;
    }

    /**
     * Method description
     *
     */
    public void setRequisitoLogroAdicionalList() {
        this.requisitoLogroAdicionalList = CommonAlumnoUtil.getRequisitoLogroAdicionalList(this);
    }

    // INSCRIPCION
    /**
     * Method description
     *
     * @return
     */
    public List<Curso> getCursosInscripcion() {
        return cursosInscripcion;
    }

    /**
     * Method description
     *
     * @param cursosInscripcion
     */
    public void setCursosInscripcion(List<Curso> cursosInscripcion) {
        this.cursosInscripcion = cursosInscripcion;
    }

    /**
     * Method description
     *
     * @param action
     * @param genericSession
     * @param pos
     * @param derecho
     * @return
     */
    public String addInscripcionAlumno(ActionCommonSupport action, GenericSession genericSession,
            Integer pos, Derecho derecho) {

        String retValue= new InscripcionSupport(this, action, genericSession).addInscripcionAlumno(getCursosInscripcion().get(pos), derecho, this.getId().getAcaCodCar(), this.getAcaCodMen());

        if (Action.SUCCESS.equals(retValue) && "P".equals(derecho.getAsignatura().getAsiTipo()))
        {          
            setDerechosAlumno();
        }
        return retValue;
           
    }

    /**
     * Method description
     *
     * @param action
     * @param genericSession
     * @param curso
     * @param derecho
     * @return
     */
    public String addInscripcionCoordinador(ActionCommonSupport action,
            GenericSession genericSession, Curso curso, DerechoCoordinadorSupport derecho) {
        return new InscripcionSupport(this, action, genericSession).addInscripcionCoordinador(genericSession.getUserType(), this, curso, derecho);
    }

    /**
     * Method description
     *
     * @param action
     * @param genericSession
     * @param oldCurso
     * @param newCurso
     * @return
     */
    public String traspasoInscripcionCoordinador(ActionCommonSupport action,
            GenericSession genericSession, Curso oldCurso, Curso newCurso) {
        return new InscripcionSupport(this, action, genericSession).traspasoInscripcionCoordinador(genericSession.getUserType(), this, oldCurso, newCurso);
    }

    /**
     * Method description
     *
     * @param genericSession
     * @param curso
     */
    public void newInscripcion(GenericSession genericSession, Curso curso) {
        new InscripcionSupport(this, genericSession).newInscripcion(curso, "INS_COORD", "");
    }


    public void swapInscripcion(GenericSession genericSession, CursoId cOld, CursoId cNew) {
        new InscripcionSupport(this, genericSession).swapInscripcion(this.id, cOld, cNew);
    }

    /**
     * Method description
     *
     * @param action
     * @param genericSession
     * @param parameters
     * @return
     */
    public int removeInscripcionCoordinador(ActionCommonSupport action,
            GenericSession genericSession, Map<String, String[]> parameters) {
        InscripcionSupport inscripcionSupport = new InscripcionSupport(this, action, genericSession);

        inscripcionSupport.removeInscripcionCoordinador(genericSession.getUserType(), parameters);
        return inscripcionSupport.getErrDelete();
    }

    /**
     * Method description
     *
     * @param action
     * @param genericSession
     * @param parameters
     * @return
     */
    public int removeInscripcionAlumno(ActionCommonSupport action,
            GenericSession genericSession, Map<String, String[]> parameters) {
        
        InscripcionSupport inscripcionSupport = new InscripcionSupport(this, action, genericSession);

        inscripcionSupport.removeInscripcionAlumno(parameters);

        return inscripcionSupport.getErrDelete();        
    }

    /**
     * Method description
     *
     *
     * @param genericSession
     */
    public void setInscripcion(GenericSession genericSession) {
        this.insList = new InscripcionSupport(this,
                genericSession).getInscripcionFull(this.getParametros().getAgnoIns(),
                this.getParametros().getSemIns());
    }

    /**
     * Method description
     *
     * @param genericSession
     * @param derecho
     */
    public void setCursosInscripcion(GenericSession genericSession, Derecho derecho) {
        this.cursosInscripcion = new InscripcionSupport(this, genericSession).getCursos(derecho);
    }

    /**
     * Method description
     *
     * @param genericSession
     * @param derecho
     * @param agnoIns
     * @param semIns
     */
    public void setCursosInscripcion(GenericSession genericSession, DerechoCoordinadorSupport derecho,
            Integer agnoIns, Integer semIns) {
        this.cursosInscripcion = new InscripcionSupport(this, genericSession).getCursos(genericSession, derecho, agnoIns, semIns);
    }

    /**
     * Method description
     *
     * @return
     */
    public Integer getAsignaturasInscritas() {
        return asignaturasInscritas;
    }

    /**
     * Method description
     *
     * @param asignaturasInscritas
     */
    public void setAsignaturasInscritas(Integer asignaturasInscritas) {
        this.asignaturasInscritas = asignaturasInscritas;
    }

    /**
     * Method description
     *
     * @return
     */
    public Integer getCreditosInscritos() {
        return creditosInscritos;
    }

    /**
     * Method description
     *
     * @param creditosInscritos
     */
    public void setCreditosInscritos(Integer creditosInscritos) {
        this.creditosInscritos = creditosInscritos;
    }

    /**
     * Method description
     *
     * @return
     */
    public Integer getCreditosNivel() {
        return creditosNivel;
    }

    /**
     * Obtiene los créditos de inscripción máximo que le corresponde al nivel en
     * que se encuentra.
     *
     * @param creditosNivel
     */
    public void setCreditosNivel(Integer creditosNivel) {
        this.creditosNivel = creditosNivel;
    }

    /**
     * Lista las evaluaciones parciales.
     *
     * @return
     */
    public List<EvaluacionAlumno> getEvaluacionAlumnoList() {
        return evaluacionAlumnoList;
    }

    /**
     * Recupera la evaluaciones parciales del alumno en un curso.
     *
     * @param id
     */
    public void setEvaluacionAlumnoList(CursoId id) {
        this.evaluacionAlumnoList = ContextUtil.getDAO().getEvaluacionAlumnoRepository(ActionUtil.getDBUser()).getNotas(this.id.getAcaRut(), id);
    }

    /**
     *
     * @return
     */
    public Integer getSctNivel() {
        return sctNivel;
    }

    /**
     *
     * @param sctNivel
     */
    public void setSctNivel(Integer sctNivel) {
        this.sctNivel = sctNivel;
    }

    public String getUltimaMatricula() {
        return ContextUtil.getDAO().getScalarRepository(ActionUtil.getDBUser()).getUltimaMatricula(id);
    }

    public List<CursoEspejo> getCargaEspejo() {
        return cargaEspejo;
    }

    public void setCargaEspejo(List<CursoEspejo> cargaEspejo) {
        this.cargaEspejo = cargaEspejo;
    }

    public Unidad getUnidadFacultad() {
        return ContextUtil.getDAO().getUnidadRepository(ActionUtil.getDBUser()).find(this.getAluCarFunction().getUnidadFacultad());
    }

    public boolean isIsAlumnoPropio() {
        return isAlumnoPropio;
    }

    public void setIsAlumnoPropio(boolean isAlumnoPropio) {
        this.isAlumnoPropio = isAlumnoPropio;
    }

    public boolean inscribioExamenAP() {
        return CommonAlumnoUtil.inscribioExamenAP(this);
    }

    public void setInitValues() {
        this.aluCarFunction = CommonAlumnoUtil.getAluCarFunction(this);
        this.parametros = CommonAlumnoUtil.getParametros(this);
    }
}
